#Componente LoginForm:

1.Importando o toast através do shadcnUI com o Sonner.
2.Criando uma constante formSchema e após isso criando o um objeto com o zod. Dentro do objeto definiremos o nome dos names passados para o formulário e validações.
3.Criando um tipo formDataSchema que será igual a uma inferência de tipo do formulário (formSchema).
4.Constante form que recebe um useForm do react-hook-form, recebendo um formDataSchema que recebe um formSchema, o defaultValues precisa ser definido obrigatoriamente para não dar erro em execução.
5.Constante router recebe um useRouter() da biblioteca next/navigation, para criação de rotas.
6.Constante handleAction utilizada dentro do da tag form do formulário. handleAction recebe um data que recebe as variáveis definidas no formDataSchema, criando uma condicional para validar o resultado pegando a senha definida no formSchema SE for a senha especificada terá acesso através de um router.push("/rota-especificada") ativando um toaster para confirmar a validação, se não, não terá, acontecerá um refresh na página e um toast afirmando o erro, a validação terá um setTimeout para ter um delay de 2 segundos."
7.No TSX terá um Form do shadcnUI, contendo toda sua estrutura (mostrada na sua documentação) recebendo os valores definidos na variável (const form).
8. Botão será do tipo submit para envio do formulário.



#Componente RegisterForm:

1.O componente de login constituisse de uma lógica parecida a do componente LoginForm.
2.Importando componentes do shadcnUI, utilizando o use client, pois tudo será renderizado no lado do servidor.
3.Importando o toast através do shadcnUI com o Sonner.
4.Criando uma constante formSchema e após isso passei os names dos inputs como objetos, validando eles com o mínimo e o máximo de caracteres.
5.Criando uma constante gênero, que receberá um array com objetos com id e values, ids como números e valores = string.
6.Criando uma constante atividade, que receberá um array com objetos com id e value, ids como números e valores como strings.
7.Utilizando o useRouter do next/navigation para redirecionar o usuário após cadastrar-se para a página de login.
8.Tipo FormDataSchema que infere o tipo do formSchema que será usado nos formulários.
9.constante form recebe o useForm<FormDataSchema>, criando um resolver: que recebe um zodResolver do hook-form-resolvers e os defaultValues tem que receber um valor vazio, por conta dos inputs.
10.constante handleAction será recebido na tag form (formulário), receberá um data que terá um FormDataSchema que recebe um formSchema. criando uma validação se a senha for igual a confirmar a senha, utilizando um setTimeout que receberá o router.push('/login') redirecionando para a página de login após 2 segundos.
11.No TSX utilizei o Form do shadcnUI passando as propriedades do form como mostrado na documentação, utilizando o handleSubmit nativo do formulário.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Componente Page da pasta platform.

1.use client, pois tudo será renderizado no lado do cliente.
2.Utilizando o useState para gerenciamento de estado passando um array com id e textos já predefinidos.
3.Criando um useState para controlar o estado dos inputs, o valor começa com uma string vazia, pois o input precisa começar vazio
4.useEffect recebe a API chamada no arquivo actions.ts, a constante fetchData é assincrona utilizado um try catch, no try tem a chamada da API através da const response e se cair no catch retorna um erro, dando response.statusText.
5.Constante addQuestion recebe um  questionText que é uma String, dentro do addQuestion terá um newQuestion que receberá um id especificado como uma String recebendo um Date.now, text recebendo um questionText, setQuestions que está no useState recebe um prev, recebendo um array com um spred operator e uma newQuestion.
6.Constante removeQuestion recebe um id que será uma string, dentro da constante terá setQuestions do useState que receberá um prev e esse prev será prev.filter para filtrar a question caso fosse question.id for diferente de id ele irá apagar.
7.TSX retornando um componente Sidebar com propriedades questions e removeQuestion.
8.Input do shadcnUI recebendo valor do useState -> inputValue. onKeyDown utilizado para o evento disparar a partir de que o e.key === Enter do teclado ele adiciona a constante addQuestion que recebe um evento e.currentTarget.value adicionando o valor, e após isso o e.currentTarget.value = ""; para limpar o input.
9.O ícone CircleArrowUp recebe um onClick que recebe uma arrow function com a constante addQuestion recebendo dentro o inputValue.



#Componente Sidebar e Navbar-Mobile

1.O componente Sidebar recebe uma interface Props para definir que o questions será do tipo id que será do tipo string e o text será um array de string, removeQuestion que receberá uma id que é uma string e retornará uma função vazia, um void;
2.Sidebar recebendo as propriedades {questions, removeQuestion}: Props (recebendo a Props da interface).
3.const router = useRouter() do next/navigation usada na constante goToQuestion que recebe um id que é uma string, dentro da constante terá um router.push levando o usuário ao clicar na pergunta ir para a página espeficada com o id.
4.TSX retorna um questions que é especificado na Props, o question terá um map para percorrer as questões através do id que será uma string, e o text será uma string também, após isso a key que é obrigatoria ser recebida no map terá um question.id, também terá um onClick recebendo um goToQuestion com um question.id, para a partir do momento que o usuário clicar na div ele será levado para a página da pergunta.
5.o parágrafo recebe um question.text.
6. O ícone trash recebe um onClick com um e (evento) para remover a questão através do id removeQuestion(question.id). E o e.stopPropagation() é para após a questão ser removida, o usuário não poderá clicar nem navegar por ela.



#Arquivo actions-openIA.ts

1.Exporta uma função assincrona recebendo um prompt que será uma string.
2.const response = recebe a API através de um fetch e um prefixo await, obrigatório, recebendo um objeto com um body recebendo um JSON.stringify, recebendo as informações do modelo, prompt, o máximo de tokens e a criatividade (temperature).
3.Criando uma estrutura condicional, se a constante response que recebe a API for diferente de ok ele vai dar um throw new Error mostrando o erro na API através da ${response.statusText}.
4.constante data é um await que vai receber a constante response que recebe a API retornando um JSON, mostrado após no console.log(data).
5.Retorna data.choices[0].text.trim();
6. Se cair no erro vai mostrar um erro e retornar uma resposta "Erro ao obter resposta da IA."



#.env.local recebe a a chave(key) da API. 